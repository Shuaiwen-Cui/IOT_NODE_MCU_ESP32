{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESP32 MCU EDGE INTELLIGENCE NODE","text":"<p>This project dedicates to the development of an IoT MCU edge intelligence node based on ESP32. If you are interested in this project, please star it and stay tuned.</p> <p></p>"},{"location":"ARCHITECTURE/ARCHITECTURE/architecture/","title":"ARCHITECTURE","text":""},{"location":"ARCHITECTURE/ARCHITECTURE/architecture/#hardware-architecture","title":"HARDWARE ARCHITECTURE","text":"<p>MAIN CONTROL + PERCEPTION + COMMUNICATION + INTERACTION + POWER SUPPLY</p> <p></p> <p></p> <p>Note</p> <p>The above is a schematic diagram of the hardware abstraction layer. The specific modules and functions are subject to the actual hardware.</p>"},{"location":"ARCHITECTURE/ARCHITECTURE/architecture/#software-architecture","title":"SOFTWARE ARCHITECTURE","text":"<p>HARDWARE LAYER + PLATFORM ABSTRACTION LAYER + SYSTEM SERVICES LAYER + APPLICATION LAYER</p> <pre><code>+------------------------------+\n| Application Layer            | &lt;-- Application Code\n+------------------------------+\n| System Services Layer        | &lt;-- OS + Middleware\n+------------------------------+\n| Platform Abstraction Layer   | &lt;-- Startup Code + HAL (register-level) + BSP (board-level)\n+------------------------------+\n| Hardware Layer               | &lt;-- Main Control + Peripherals\n+------------------------------+\n</code></pre> <p></p>"},{"location":"ARCHITECTURE/ROADMAP/roadmap/","title":"Development Roadmap and Progress","text":""},{"location":"ARCHITECTURE/ROADMAP/roadmap/#hardware","title":"Hardware","text":"<p>Main Control</p> <ul> <li> Main control ATK-DNESP32S3M<ul> <li>ATK-MWS3S<ul> <li>ROM: 384 KB</li> <li>SRAM: 512 KB</li> <li>PSRAM: 8 MB</li> <li>Flash: 16 MB</li> </ul> </li> <li>Power indicator x 1</li> <li>Status indicator x 1</li> <li>Reset button x 1</li> <li>Function button x 1</li> <li>USB to serial (Type-C) x 1</li> <li>USB slave interface (JTAG) x 1</li> <li>TF card interface x 1</li> <li>5V power input/output x 1 set</li> <li>3.3V power input/output x 1 set</li> <li>Exposed IO ports x 36</li> </ul> </li> </ul> <p>Sensing</p> <ul> <li> MPU6050</li> <li> Temperature and humidity sensor (DHT11)</li> <li> Low-precision accelerometer (ADXL362)</li> <li> High-precision accelerometer (ADXL355)</li> <li> Camera module</li> <li> Audio</li> </ul> <p>Communication</p> <ul> <li> Main control board - Bluetooth module</li> <li> Main control board - WiFi module</li> <li> 4G (purchased, pending connection)</li> <li> 5G module (to be purchased)</li> <li> LoRa module (to be purchased)</li> </ul> <p>Interaction</p> <ul> <li> Main control board - LED</li> <li> RGB LED</li> </ul>"},{"location":"ARCHITECTURE/ROADMAP/roadmap/#drivers","title":"Drivers","text":"<p>Main Control</p> <ul> <li> Timer</li> <li> RTC (Real Time Clock)</li> <li> SPI (SPI2 - LCD control/SD card)</li> <li> RNG Random Number Generator</li> <li> TF CARD - SPI</li> <li> I2C</li> <li> UART</li> </ul> <p>Sensing</p> <ul> <li> ESP built-in thermometer (onboard)</li> <li> MPU6050</li> <li> Temperature and humidity sensor (DHT11)</li> <li> Low-precision accelerometer (ADXL362)</li> <li> High-precision accelerometer (ADXL355)</li> <li> Camera module</li> <li> Audio</li> </ul> <p>Communication</p> <ul> <li> WiFi</li> <li> Bluetooth</li> <li> MQTT</li> </ul> <p>Interaction</p> <ul> <li> LED</li> <li> RGB LED</li> <li> Button (onboard) (supports external interrupts)</li> <li> LCD screen</li> </ul>"},{"location":"ARCHITECTURE/ROADMAP/roadmap/#middleware-esp-third-party","title":"Middleware - ESP &amp; Third Party","text":"<p>File System - [x] VFS   - [x] FATFS   - [x] SPIFFS</p> <p>Network</p> <p>Protocol</p> <p>Storage</p> <p>UI</p> <p>Computation</p> <p>AI</p> <p>ESP-AI / ESP-DL</p>"},{"location":"ARCHITECTURE/ROADMAP/roadmap/#middleware-ttnyshm","title":"Middleware - TTNYSHM","text":""},{"location":"INSTRUCTIONS/instructions/","title":"PROJECT INSTRUCTIONS","text":"<p>Note</p> <p>This section details the how the node is built and how it should be used.</p>"},{"location":"INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/","title":"PROJECT FRAMEWORK","text":""},{"location":"INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#overview","title":"Overview","text":"<p>Project Framework</p> <p>After completing the project initialization, we also need to reorganize and sort the generated project to better support our project development. This section will introduce how to reorganize and sort the project.</p>"},{"location":"INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#project-framework_1","title":"Project Framework","text":"<p>In this project, the project code organization structure is as follows:</p> <pre><code>project-name/\n\u251c\u2500\u2500 CMakeLists.txt          # top-level build file for the project\n\u251c\u2500\u2500 partitions-16MiB.csv    # partition table\n\u251c\u2500\u2500 sdkconfig               # current configuration file\n\u251c\u2500\u2500 sdkconfig.old           # old configuration file for reference\n\u251c\u2500\u2500 main/                   # main application code\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # build file for the main directory\n\u2502   \u251c\u2500\u2500 main.c              # entry point of the application\n\u2502   \u2514\u2500\u2500 app/                # application logic\n\u2502       \u251c\u2500\u2500 app.c           # application layer implementation\n\u2502       \u251c\u2500\u2500 app.h           # header file for application interface\n\u2502       \u2514\u2500\u2500 ...             # additional files\n\u251c\u2500\u2500 components/             # peripheral modules\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # build file for components\n\u2502   \u251c\u2500\u2500 setup/              # setup for components\n\u2502   \u2502   \u251c\u2500\u2500 setup.h         # header file for setup module\n\u2502   \u2502   \u2514\u2500\u2500 setup.c         # implementation of setup module\n\u2502   \u251c\u2500\u2500 component1/         # component1 module\n\u2502   \u2502   \u251c\u2500\u2500 component1.h    # header file for component1\n\u2502   \u2502   \u251c\u2500\u2500 component1.c    # implementation of component1\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # additional peripheral modules\n\u251c\u2500\u2500 tinyshm/                # tinyshm framework\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # build file for tinyshm\n\u2502   \u251c\u2500\u2500 config/             # configuration module\n\u2502   \u2502   \u251c\u2500\u2500 config.h        # header file for configuration\n\u2502   \u2502   \u2514\u2500\u2500 config.c        # implementation of configuration\n\u2502   \u251c\u2500\u2500 componentA/         # componenta module\n\u2502   \u2502   \u251c\u2500\u2500 componentA.h    # header file for componenta\n\u2502   \u2502   \u251c\u2500\u2500 componentA.c    # implementation of componenta\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # additional modules\n\u251c\u2500\u2500 build/                  # build directory (auto-generated)\n\u2502   \u2514\u2500\u2500 ...                 # files generated during the build process\n\u2514\u2500\u2500 README.md               # project documentation\n</code></pre> <p>Note</p> <ul> <li>main folder: main application code + user code inside the app folder</li> <li>components folder: peripheral module BSP, low-level oriented.</li> <li>tinyshm folder: TinySHM framework code, high-level oriented.</li> <li>build folder: auto-generated build directory.</li> </ul> <p>Important Reminder</p> <p>Every time you add a new module, you must remember to add the new module path in the corresponding CMakelists.txt file, otherwise there will be an error that the file cannot be found during compilation. In addition to adding the path of the module (source and include), the dependency (requirement) also needs to be added in the corresponding CMakelists.txt file. For example, if GPIO related functions are used, you need to add driver, and if a timer is used, you need to add esp_timer.</p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/","title":"PROJECT INITIALIZATION","text":""},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#environment-setup","title":"ENVIRONMENT SETUP","text":"<p>Info</p> <p>We use VSCode + ESP-IDF for development. Details to setup the development environment can be found on the internet. I assume you have already set up the development environment.</p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#create-a-new-project","title":"CREATE A NEW PROJECT","text":"<ol> <li>Launch VSCode and then open the command palette by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS).</li> <li>Type <code>ESP-IDF: New Project</code> and press <code>Enter</code>. </li> <li>Enter the project configuration UI and fill in the required information. </li> <li>Choose a template to create a new project. </li> <li>Open in a new window.  </li> </ol>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#templated-project-structure","title":"TEMPLATED PROJECT STRUCTURE","text":"<pre><code>sample_proj/ # Project root directory\n\u251c\u2500\u2500 CMakeLists.txt # Project CMake configuration file\n\u251c\u2500\u2500 main/ # Main application directory\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # Application CMake configuration file\n\u2502   \u2514\u2500\u2500 main.c # Application source file\n\u2514\u2500\u2500 sdkconfig # Project configuration file\n</code></pre>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#project-configuration","title":"PROJECT CONFIGURATION","text":"<p>Note</p> <p>This step is to configure the project settings to maximize the power of the hardware, i.e., use target-specific configurations rather than default configurations.</p> <p>Warning</p> <p>Before you open the project configuration UI, make sure you have the project open in VSCode, set the target to your board, and have the ESP-IDF extension installed.</p> <ol> <li>Enter the project configuration UI by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and type <code>ESP-IDF: Configure Project</code>. Alternatively, one can click the gear icon on the bottom menu of the VSCode window. </li> <li>'FLASH' configuration. In the search bar, type <code>flash</code> and press <code>Enter</code>.  </li> <li>'Partition Table' configuration. In the search bar, type <code>partition</code> and press <code>Enter</code>.  details to be provided later</li> <li>'PSRAM' configuration. In the search bar, type <code>psram</code> and press <code>Enter</code>. </li> <li>Change the CPU frequency. In the search bar, type <code>cpu</code> and press <code>Enter</code>. Modify the CPU frequency to 240 MHz. </li> <li>Modify the FreeRTOS tick clock frequency. In the search bar, type <code>tick</code> and press <code>Enter</code>. Modify the tick clock frequency to 1000 Hz. </li> <li>Modify the partition table. In the command palette, type <code>ESP-IDF: Open Partition Table Editor UI</code>. </li> <li>Modify the partition table as shown below. </li> <li>Save the all the modifications.</li> </ol> <p>By far, we have finished the project initialization. The configuration is now consistent with the hardware onboard resources. </p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#template-program","title":"TEMPLATE PROGRAM","text":"<p>Now, let's create a simple program to test the board. </p> <p>Go to the main.c file and replace the content with the following code:</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>Then, ensure the serial port number is corrrect, the target board is selected, then click the \"fire flame\" icon to build, flash and monitor the program. Then, you should be able to see the printouts on the serial monitor. </p>"},{"location":"INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#conclusions","title":"CONCLUSIONS","text":"<p>Note</p> <p>This project sets up the minimal system development board DNESP32S3M, and this project can serve as a useful template for future development. Compared to STM32, many low level details are hidden from the user, therefore the set up process is much simpler.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"zh/","title":"ESP32\u5fae\u63a7\u5236\u5668\u8fb9\u7f18\u667a\u80fd\u8282\u70b9","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u81f4\u529b\u4e8e\u57fa\u4e8eESP32\u7684\u5fae\u63a7\u5236\u5668\u8fb9\u7f18\u667a\u80fd\u7269\u8054\u7f51\u8282\u70b9\u7684\u5f00\u53d1\u3002\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u9879\u76ee\u611f\u5174\u8da3\uff0c\u8bf7\u7ed9\u5b83\u70b9\u4e2a\u8d5e\u5e76\u4fdd\u6301\u5173\u6ce8\u3002</p> <p></p>"},{"location":"zh/ARCHITECTURE/ARCHITECTURE/architecture/","title":"\u67b6\u6784","text":""},{"location":"zh/ARCHITECTURE/ARCHITECTURE/architecture/#_2","title":"\u786c\u4ef6\u67b6\u6784","text":"<p>\u4e3b\u63a7 + \u611f\u77e5 + \u901a\u4fe1 + \u4ea4\u4e92 + \u4f9b\u7535</p> <p></p> <p></p> <p>Note</p> <p>\u4ee5\u4e0a\u4e3a\u786c\u4ef6\u62bd\u8c61\u5c42\u7684\u793a\u610f\u56fe\uff0c\u5177\u4f53\u6a21\u5757\u548c\u529f\u80fd\u4ee5\u5b9e\u9645\u786c\u4ef6\u4e3a\u51c6\u3002</p>"},{"location":"zh/ARCHITECTURE/ARCHITECTURE/architecture/#_3","title":"\u8f6f\u4ef6\u67b6\u6784","text":"<p>\u786c\u4ef6\u5c42 + \u5e73\u53f0\u62bd\u8c61\u5c42 + \u7cfb\u7edf\u670d\u52a1\u5c42 + \u5e94\u7528\u5c42</p> <pre><code>+----------------------------------------+\n| \u5e94\u7528\u5c42 (Application Layer)              | &lt;-- \u5e94\u7528\u4ee3\u7801\n+----------------------------------------+\n| \u7cfb\u7edf\u670d\u52a1\u5c42 (System Services Layer)      | &lt;-- \u64cd\u4f5c\u7cfb\u7edf + \u4e2d\u95f4\u4ef6\n+----------------------------------------+\n| \u5e73\u53f0\u62bd\u8c61\u5c42 (Platform Abstraction Layer) | &lt;-- \u542f\u52a8\u4ee3\u7801 + \u786c\u4ef6\u62bd\u8c61\u5c42 (\u5bc4\u5b58\u5668\u7ea7) + \u677f\u7ea7\u652f\u6301\u5305 (\u5f00\u53d1\u677f\u7ea7)\n+----------------------------------------+\n| \u786c\u4ef6\u5c42 (Hardware Layer)                 | &lt;-- \u4e3b\u63a7\u5355\u5143 + \u5916\u8bbe\n+----------------------------------------+\n</code></pre> <p></p>"},{"location":"zh/ARCHITECTURE/ROADMAP/roadmap/","title":"\u5f00\u53d1\u8def\u7ebf\u56fe\u4e0e\u8fdb\u5ea6","text":""},{"location":"zh/ARCHITECTURE/ROADMAP/roadmap/#_2","title":"\u786c\u4ef6","text":"<p>\u4e3b\u63a7</p> <ul> <li> \u4e3b\u63a7 ATK-DNESP32S3M<ul> <li>ATK-MWS3S<ul> <li>ROM: 384 KB</li> <li>SRAM: 512 KB</li> <li>PSRAM: 8 MB</li> <li>Flash: 16 MB</li> </ul> </li> <li>\u7535\u6e90\u6307\u793a\u706f x 1</li> <li>\u72b6\u6001\u6307\u793a\u706f x 1</li> <li>\u590d\u4f4d\u6309\u952e x 1</li> <li>\u529f\u80fd\u6309\u952e x 1</li> <li>USB\u8f6c\u4e32\u53e3 \uff08Type-C\uff09x 1</li> <li>USB\u4ece\u673a\u63a5\u53e3\uff08JTAG\uff09x 1</li> <li>TF\u5361\u63a5\u53e3 x 1</li> <li>5V \u7535\u6e90\u8f93\u5165/\u8f93\u51fa x 1\u7ec4</li> <li>3.3V \u7535\u6e90\u8f93\u5165/\u8f93\u51fa x 1\u7ec4</li> <li>\u5f15\u51faIO\u53e3 x 36</li> </ul> </li> </ul> <p>\u611f\u77e5</p> <ul> <li> MPU6050</li> <li> \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668(DHT11)</li> <li> \u4f4e\u7cbe\u5ea6\u52a0\u901f\u5ea6\u4f20\u611f\u5668(ADXL362)</li> <li> \u9ad8\u7cbe\u5ea6\u52a0\u901f\u5ea6\u4f20\u611f\u5668(ADXL355)</li> <li> \u6444\u50cf\u5934\u6a21\u5757</li> <li> \u97f3\u9891</li> </ul> <p>\u901a\u8baf</p> <ul> <li> \u4e3b\u63a7\u677f-\u84dd\u7259\u6a21\u5757</li> <li> \u4e3b\u63a7\u677f-WIFI\u6a21\u5757</li> <li> 4G\uff08\u5df2\u8d2d\uff0c\u5f85\u8fde\u63a5\uff09</li> <li> 5G\u6a21\u5757 (\u5f85\u9009\u8d2d)</li> <li> LoRa\u6a21\u5757 (\u5f85\u9009\u8d2d)</li> </ul> <p>\u4ea4\u4e92</p> <ul> <li> \u4e3b\u63a7\u677f-LED</li> <li> RGB LED</li> </ul>"},{"location":"zh/ARCHITECTURE/ROADMAP/roadmap/#_3","title":"\u9a71\u52a8","text":"<p>\u4e3b\u63a7</p> <ul> <li> \u5b9a\u65f6\u5668</li> <li> RTC (\u5b9e\u65f6\u65f6\u949f)</li> <li> SPI (SPI2 - LCD\u63a7\u5236/SD\u5361)</li> <li> RNG \u968f\u673a\u6570\u751f\u6210\u5668</li> <li> TF CARD - SPI</li> <li> I2C</li> <li> UART</li> </ul> <p>\u611f\u77e5</p> <ul> <li> ESP\u5185\u7f6e\u6e29\u5ea6\u8ba1\uff08\u677f\u4e0a\uff09</li> <li> MPU6050</li> <li> \u6e29\u6e7f\u5ea6\u4f20\u611f\u5668(DHT11)</li> <li> \u4f4e\u7cbe\u5ea6\u52a0\u901f\u5ea6\u4f20\u611f\u5668(ADXL362)</li> <li> \u9ad8\u7cbe\u5ea6\u52a0\u901f\u5ea6\u4f20\u611f\u5668(ADXL355)</li> <li> \u6444\u50cf\u5934\u6a21\u5757</li> <li> \u97f3\u9891</li> </ul> <p>\u901a\u8baf</p> <ul> <li> WIFI</li> <li> \u84dd\u7259</li> <li> MQTT</li> </ul> <p>\u4ea4\u4e92</p> <ul> <li> LED</li> <li> RGB LED</li> <li> \u6309\u94ae(\u677f\u4e0a)(\u652f\u6301\u5916\u90e8\u4e2d\u65ad)</li> <li> \u6db2\u6676\u663e\u793a\u5c4f</li> </ul>"},{"location":"zh/ARCHITECTURE/ROADMAP/roadmap/#-esp","title":"\u4e2d\u95f4\u4ef6-ESP&amp;\u4e09\u65b9","text":"<p>\u6587\u4ef6\u7cfb\u7edf</p> <ul> <li> VFS</li> <li> FATFS</li> <li> SPIFFS</li> </ul> <p>\u7f51\u7edc</p> <p>\u534f\u8bae</p> <p>\u5b58\u50a8</p> <p>UI</p> <p>\u8ba1\u7b97</p> <p>AI</p> <p>ESP-AI / ESP-DL</p>"},{"location":"zh/ARCHITECTURE/ROADMAP/roadmap/#-ttnyshm","title":"\u4e2d\u95f4\u4ef6-TTNYSHM","text":""},{"location":"zh/INSTRUCTIONS/instructions/","title":"\u9879\u76ee\u8bf4\u660e","text":"<p>Note</p> <p>\u672c\u6587\u6863\u8bb0\u5f55\u4e86\u5982\u4f55\u6784\u5efa\u8282\u70b9\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u8282\u70b9\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/","title":"\u9879\u76ee\u6846\u67b6","text":""},{"location":"zh/INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#_2","title":"\u4ecb\u7ecd","text":"<p>\u9879\u76ee\u6846\u67b6</p> <p>\u5728\u5b8c\u6210\u9879\u76ee\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u751f\u6210\u7684\u9879\u76ee\u8fdb\u884c\u91cd\u65b0\u7ec4\u7ec7\u548c\u6574\u7406\uff0c\u4ee5\u4f7f\u5f97\u5176\u66f4\u597d\u5730\u652f\u6491\u6211\u4eec\u7684\u9879\u76ee\u5f00\u53d1\u3002\u672c\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u5bf9\u9879\u76ee\u8fdb\u884c\u91cd\u65b0\u7ec4\u7ec7\u548c\u6574\u7406\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-FRAMEWORK/project-framework/#_3","title":"\u9879\u76ee\u6846\u67b6","text":"<p>\u5728\u672c\u9879\u76ee\u4e2d\uff0c\u9879\u76ee\u4ee3\u7801\u7ec4\u7ec7\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>project-name/\n\u251c\u2500\u2500 CMakeLists.txt          # \u9879\u76ee\u7684\u9876\u5c42\u6784\u5efa\u6587\u4ef6\n\u251c\u2500\u2500 partitions-16MiB.csv    # \u5206\u533a\u8868\n\u251c\u2500\u2500 sdkconfig               # \u5f53\u524d\u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 sdkconfig.old           # \u65e7\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u4f5c\u53c2\u8003\n\u251c\u2500\u2500 main/                   # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # main\u76ee\u5f55\u7684\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 main.c              # \u5e94\u7528\u7a0b\u5e8f\u5165\u53e3\u70b9\n\u2502   \u2514\u2500\u2500 app/                # \u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\n\u2502       \u251c\u2500\u2500 app.c           # \u5e94\u7528\u5c42\u5b9e\u73b0\n\u2502       \u251c\u2500\u2500 app.h           # \u5e94\u7528\u63a5\u53e3\u7684\u5934\u6587\u4ef6\n\u2502       \u2514\u2500\u2500 ...             # \u5176\u4ed6\u6587\u4ef6\n\u251c\u2500\u2500 components/             # \u5916\u56f4\u6a21\u5757\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # components\u76ee\u5f55\u7684\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 setup/              # setup\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 setup.h         # setup\u6a21\u5757\u7684\u5934\u6587\u4ef6\n\u2502   \u2502   \u2514\u2500\u2500 setup.c         # setup\u6a21\u5757\u7684\u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 component1/         # component1\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 component1.h    # component1\u7684\u5934\u6587\u4ef6\n\u2502   \u2502   \u251c\u2500\u2500 component1.c    # component1\u7684\u5b9e\u73b0\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # \u5176\u4ed6\u5916\u56f4\u6a21\u5757\n\u251c\u2500\u2500 tinyshm/                # tinyshm\u6846\u67b6\n\u2502   \u251c\u2500\u2500 CMakeLists.txt      # tinyshm\u76ee\u5f55\u7684\u6784\u5efa\u6587\u4ef6\n\u2502   \u251c\u2500\u2500 config/             # \u914d\u7f6e\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 config.h        # \u914d\u7f6e\u6a21\u5757\u7684\u5934\u6587\u4ef6\n\u2502   \u2502   \u2514\u2500\u2500 config.c        # \u914d\u7f6e\u6a21\u5757\u7684\u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 componentA/         # componentA\u6a21\u5757\n\u2502   \u2502   \u251c\u2500\u2500 componentA.h    # componentA\u7684\u5934\u6587\u4ef6\n\u2502   \u2502   \u251c\u2500\u2500 componentA.c    # componentA\u7684\u5b9e\u73b0\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ...                 # \u5176\u4ed6\u6a21\u5757\n\u251c\u2500\u2500 build/                  # \u6784\u5efa\u76ee\u5f55\uff08\u81ea\u52a8\u751f\u6210\uff09\n\u2502   \u2514\u2500\u2500 ...                 # \u6784\u5efa\u8fc7\u7a0b\u4e2d\u751f\u6210\u7684\u6587\u4ef6\n\u2514\u2500\u2500 README.md               # \u9879\u76ee\u6587\u6863\n</code></pre> <p>Note</p> <ul> <li>main \u6587\u4ef6\u5939\u4e0b\u662f\u4e3b\u7a0b\u5e8f\u4ee3\u7801\uff0c\u5305\u62ec\u5728\u5b50\u6587\u4ef6\u5939app\u4e2d\u7684\u5e94\u7528\u903b\u8f91\u4ee3\u7801\u3002</li> <li>components \u6587\u4ef6\u5939\u4e0b\u662f\u677f\u7ea7\u652f\u6301\u5305\uff0c\u5305\u62ec\u5404\u5916\u8bbe\u9a71\u52a8\uff0c\u9762\u5411\u5e95\u5c42\u3002</li> <li>tinyshm \u6587\u4ef6\u5939\u4e0b\u662f TinySHM \u6846\u67b6\u4ee3\u7801\uff0c \u5305\u62ec\u7ed9\u7c7b\u9762\u5411\u7ed3\u6784\u5065\u5eb7\u76d1\u6d4b\u8fb9\u7f18\u8ba1\u7b97\u7684\u5404\u6a21\u5757\uff0c\u9762\u5411\u9876\u5c42\u3002</li> <li>build \u6587\u4ef6\u5939\u662f\u7f16\u8bd1\u751f\u6210\u7684\u6587\u4ef6\u5939\uff0c\u5b58\u653e\u7f16\u8bd1\u751f\u6210\u7684\u6587\u4ef6\u3002 </li> </ul> <p>\u91cd\u8981\u63d0\u793a</p> <p>\u6bcf\u6b21\u589e\u52a0\u65b0\u7684\u6a21\u5757\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97\u5728\u5bf9\u5e94CMakelists.txt\u6587\u4ef6\u4e2d\u6dfb\u52a0\u65b0\u7684\u6a21\u5757\u8def\u5f84\uff0c\u5426\u5219\u7f16\u8bd1\u65f6\u4f1a\u51fa\u73b0\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef\u3002\u9664\u4e86\u6a21\u5757\uff08source and include\uff09\u9700\u8981\u6dfb\u52a0\u8def\u5f84\u5916\uff0c\u4f9d\u8d56\uff08requirement\uff09\u4e5f\u9700\u8981\u5728\u5bf9\u5e94\u7684CMakelists.txt\u6587\u4ef6\u4e2d\u6dfb\u52a0\u3002\u6bd4\u5982\uff0c\u5982\u679c\u4f7f\u7528\u4e86GPIO\u76f8\u5173\u529f\u80fd\uff0c\u5219\u9700\u8981\u6dfb\u52a0driver\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u5b9a\u65f6\u5668\uff0c\u5219\u9700\u8981\u6dfb\u52a0esp_timer\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/","title":"\u9879\u76ee\u521d\u59cb\u5316","text":""},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_2","title":"\u73af\u5883\u51c6\u5907","text":"<p>Info</p> <p>\u6211\u4eec\u4f7f\u7528 VSCode + ESP-IDF \u8fdb\u884c\u5f00\u53d1\u3002\u6709\u5173\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u3002\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u5f00\u53d1\u73af\u5883\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_3","title":"\u521b\u5efa\u65b0\u9879\u76ee","text":"<ol> <li>\u542f\u52a8 VSCode\uff0c\u7136\u540e\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u6253\u5f00\u547d\u4ee4\u9762\u677f\u3002</li> <li>\u8f93\u5165 <code>ESP-IDF: New Project</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI \u5e76\u586b\u5199\u6240\u9700\u4fe1\u606f\u3002 </li> <li>\u9009\u62e9\u4e00\u4e2a\u6a21\u677f\u6765\u521b\u5efa\u65b0\u9879\u76ee\u3002 </li> <li>\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u3002  </li> </ol>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_4","title":"\u6a21\u677f\u5316\u9879\u76ee\u7ed3\u6784","text":"<pre><code>sample_proj/ # \u9879\u76ee\u6839\u76ee\u5f55\n\u251c\u2500\u2500 CMakeLists.txt # \u9879\u76ee CMake \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/ # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # \u5e94\u7528\u7a0b\u5e8f CMake \u914d\u7f6e\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 main.c # \u5e94\u7528\u7a0b\u5e8f\u6e90\u6587\u4ef6\n\u2514\u2500\u2500 sdkconfig # \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\n</code></pre>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_5","title":"\u9879\u76ee\u914d\u7f6e","text":"<p>Note</p> <p>\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u914d\u7f6e\u9879\u76ee\u8bbe\u7f6e\u4ee5\u6700\u5927\u5316\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u5373\u4f7f\u7528\u7279\u5b9a\u4e8e\u76ee\u6807\u7684\u914d\u7f6e\u800c\u4e0d\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>Warning</p> <p>\u5728\u6253\u5f00\u9879\u76ee\u914d\u7f6e UI \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5728 VSCode \u4e2d\u6253\u5f00\u4e86\u9879\u76ee\uff0c\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u677f\u5b50\uff0c\u5e76\u5b89\u88c5\u4e86 ESP-IDF \u6269\u5c55\u3002</p> <ol> <li>\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u5e76\u8f93\u5165 <code>ESP-IDF: Configure Project</code> \u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u70b9\u51fb VSCode \u7a97\u53e3\u5e95\u90e8\u83dc\u5355\u7684\u9f7f\u8f6e\u56fe\u6807\u3002 </li> <li>'FLASH' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>flash</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>'Partition Table' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>partition</code> \u5e76\u6309 <code>Enter</code>\u3002  \u8be6\u7ec6\u4fe1\u606f\u7a0d\u540e\u63d0\u4f9b</li> <li>'PSRAM' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>psram</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u66f4\u6539 CPU \u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>cpu</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06 CPU \u9891\u7387\u4fee\u6539\u4e3a 240 MHz\u3002 </li> <li>\u4fee\u6539 FreeRTOS tick \u65f6\u949f\u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>tick</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06\u9891\u7387\u4fee\u6539\u4e3a 1000\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u3002\u5728\u547d\u4ee4\u9762\u677f\u4e2d\u8f93\u5165 <code>ESP-IDF: Open Partition Table Editor UI</code>\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u5982\u4e0b\u6240\u793a\u3002 </li> <li>\u4fdd\u5b58\u6240\u6709\u4fee\u6539\u3002</li> </ol> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u9879\u76ee\u521d\u59cb\u5316\u3002\u914d\u7f6e\u4fe1\u606f\u73b0\u5728\u4e0e\u786c\u4ef6\u677f\u4e0a\u8d44\u6e90\u4e00\u81f4\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_6","title":"\u6a21\u677f\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u6d4b\u8bd5\u677f\u5b50\u3002</p> <p>\u8f6c\u5230 main.c \u6587\u4ef6\u5e76\u7528\u4ee5\u4e0b\u4ee3\u7801\u66ff\u6362\u5185\u5bb9\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>\u7136\u540e\uff0c\u786e\u4fdd\u4e32\u53e3\u6b63\u786e\uff0c\u677f\u5b50\u8bbe\u7f6e\u6b63\u786e\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u70e7\u5f55\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u4f60\u5e94\u8be5\u4f1a\u770b\u5230\u4e32\u53e3\u8f93\u51fa\u663e\u793a\u5f00\u53d1\u677f\u4fe1\u606f\u548c <code>Hello-ESP32</code> \u6d88\u606f\u3002</p>"},{"location":"zh/INSTRUCTIONS/PROJECT-INITIALIZATION/project-initialization/#_7","title":"\u7ed3\u8bba","text":"<p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u5bf9DNESP32S3M\u6700\u5c0f\u7cfb\u7edf\u677f\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e3a\u540e\u7eed\u5f00\u53d1\u63d0\u4f9b\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6a21\u677f\u3002\u76f8\u6bd4\u8f83\u4e0eSTM32\uff0cESP32\u7684\u5f00\u53d1\u9690\u85cf\u4e86\u8bb8\u591a\u7ec6\u8282\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8bbe\u7f6e\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\u3002</p>"}]}